Все сервисы Хабра Сообщество IT-специалистов Ответы на любые вопросы об IT Профессиональное развитие в IT Удаленная работа для IT-специалистов Как стать автором Что ты знаешь о взломщиках? Все потоки Разработка Администрирование Дизайн Менеджмент Маркетинг Научпоп Войти Регистрация N-Cube сегодня в 07:23 Вычислительная геология и визуализация: пример Python 3 Jupyter Notebook Open source, Программирование, Геоинформационные сервисы, Визуализация данных, Научно-популярное Сегодня вместо обсуждения геологических моделей мы посмотрим пример их программирования в среде Jupyter Notebook на языке Python 3 и с библиотеками Pandas, NumPy, SciPy, XArray, Dask Distributed, Numba, VTK, PyVista, Matplotlib. Это довольно простой ноутбук с поддержкой многопоточной работы и возможностью запуска локально и в кластере для обработки больших данных, отложенными вычислениями (ленивыми) и наглядной трехмерной визуализацией результатов. В самом деле, я постарался собрать разом целый набор сложных технических концепций и сделать их простыми. Для создания кластера на Amazon AWS смотрите скрипт AWS Init script for Jupyter Python GIS processing, предназначенный для единовременного создания набора инстансов и запуска планировщика ресурсов на главном инстансе. Визуализация с помощью Visualization Toolkit(VTK) и PyVista это уже далеко не Matplotlib Идея сделать такой пример возникла у меня давно, поскольку я регулярно занимаюсь разнообразными вычислительными задачами, в том числе для различных университетов и для геологоразведочной индустрии, и знаком очень близко с проблемами переносимости и поддерживаемости программ, а также проблемами работы с так называемыми большими данными (сотни гигабайт и терабайты) и визуализацией результатов. Так что само собой появилось желание сделать ноутбук-пример, в котором коротко и просто показать и красивую визуализацию и распараллеливание и ускорение кода Python и чтобы этот ноутбук можно было без изменений запустить как локально, так и на кластере. Все использованные библиотеки доступны уже много лет, но мало известны, или, как говорится, они остаются широко известными в узких кругах. Оставалось лишь найти подходящую задачку, на которой все это можно показать и это было, пожалуй, самым сложным — ведь мне хотелось, чтобы пример получился достаточно осмысленным и полезным. И вот такая задача нашлась — рассмотреть моделирование гравитационного поля на поверхности для заданной (синтетической в данном случае) модели плотности недр и некоторые последующие преобразования с вычислением фрактального индекса по компонентам пространственного спектра и кольцевого преобразования Радона, как его называют математики, или Хафа, согласно компьютерным наукам. Замечательно то, что с популярными библиотеками Python эти преобразования делаются буквально в несколько строчек кода, что особенно ценно для примера. Поскольку моделирование поля в каждой точке поверхности требует вычисления для всего трехмерного объема, мы будем обрабатывать гигантский объем данных. Для визуализации используем человеколюбивую обертку PyVista для библиотеки VTK — Visualization Toolkit, потому что писать код для последней это путь истинных джедаев… кто хочет лично в том убедиться, смотрите мой модуль к ParaView N-Cube ParaView plugin for 3D/4D GIS Data Visualization, написанный как раз на Python + VTK. Теперь предлагаю проследовать по ссылке на страницу GitHub репозитория или сразу открыть ноутбук basic.ipynb Надеюсь, код достаточно просто читается, остановлюсь лишь на нескольких особенностях. Запускаемый в ноутбуке локальный кластер dask предназначен для работы на многоядерных компьютерах, а вот для работы в кластере потребуется настроить подключение к его планировщику. В упомянутом выше скрипте AWS Init script for Jupyter Python GIS processing есть соответствующие комментарии и ссылки. В коде мы используем векторизацию NumPy, то есть передаем сразу массивы, а не скаляры, при этом пользуемся тем, что XArray объекты предоставляют доступ к внутренним NumPy объектам (object.values). Код NumPy ускорить непросто, но с помощью Numba и для такого кода можно получить некоторый выигрыш в скорости исполнения (возможно, даже около 15%): from numba import jit
@jit(nopython=True, parallel=True)
def delta_grav_vertical(delta_mass, x, y, z):
    G=6.67408*1e-11
    return -np.sum((100.*1000)*G*delta_mass*z/np.power(x**2 + y**2 + z**2, 1.5)) Для перебора всех точек на поверхности куба и вычисления для каждой такой точки гравитационного воздействия от каждой точки куба (это, кстати, получается пятикратный интеграл) мы пишем: def forward_gravity(da):
    (da_y, da_x, da_z) = xr.broadcast(da.y, da.x, da.z)
    deltagrav = lambda x0, y0: delta_grav_vertical(da.values.ravel(), (da_x.values.ravel()-x0), (da_y.values.ravel()-y0), (da_z.values.ravel()-0))
    gravity = xr.apply_ufunc(deltagrav, da_x.isel(z=0).chunk(50), da_y.isel(z=0).chunk(50), vectorize=True, dask='parallelized')
    ... Здесь xarray.broadcast с линеаризацией массивов функцией ravel() позволяют из трех одномерных координат x, y, z получить триплеты координат для каждой точки куба. Выражения da_x.isel(z=0) и da_y.isel(z=0) извлекают x, y координаты верхней поверхности куба, на которой и вычисляется гравитационное поле (точнее, его вертикальную компоненту, т.к. именно она измеряется при практических исследованиях и такие данные доступны для анализа). Функция xarray.apply_ufunc() весьма универсальная и одновременно обеспечивает векторизацию и поддержку параллельных ленивых вычислений dask для указанной коллбэк функции deltagrav. Хитрость заключается в том, что для выполнения вычислений на кубе для каждой точки поверхности нужно координаты поверхности передать в виде XArray массивов, а для использования dask они также должны быть dask массивами, что мы и обеспечиваем конструкциями da_x.isel(z=0).chunk(50) и da_y.isel(z=0).chunk(50), где 50 это размер блока по координатам x, y (подбирается в зависимости от размера массивов и количества доступных вычислительных потоков). Да, такая вот магия — достаточно лишь использовать вызов chunk() для XArray массива, чтобы автоматически превратить его в dask массив. Обратим внимание, что dask-вычисления по умолчанию являются ленивыми (отложенными), то есть вызов функции forward_gravity() завершается почти мгновенно, но возвращаемый результат является лишь оберткой, которая инициирует вычисления только при непосредственном обращении к данным или вызовом load(). При интерактивной работе это очень удобно, так как мы можем написать сложный пайплайн с большими наборами данных и для проверки и визуализации выбрать лишь маленький его кусочек, а при необходимости и запустить вычисления на полном наборе данных. К примеру, мне часто приходится работать с NetCDF датасетами глобального рельефа планеты и прочими в сотни гигабайт на своем ноутбуке — визуализируя малую часть данных, а потом запускать уже готовый ноутбук в облаке для обработки всех данных. Таким образом, код для локальной работы и его продакшен версия ничем не отличаются. Главное, правильно настроить размеры dask блоков, иначе вся магия "сломается". Код кольцевого преобразования простой и полностью основан на стандартной двумерной свертке с кольцевой маской. Вот с вычислением фрактального индекса есть небольшой нюанс. А именно, здесь используется гауссова полосовая фильтрация исходного растра для выделения спектральных компонентов (диапазонов пространственных частот), мощность которых вычисляется как стандартное отклонение значений полученных матриц. Для нашей синтетической модели можно бы и попроще, а вот для реальных данных этот метод оказывается оптимальным в силу своей устойчивости к очень зашумленным данным и отсутствия проблем с границами. Далее стандартным способом вычисляется наклон кривой на двойном логарифмическом графике (логарифм длины волны и логарифм мощности компоненты). В заключение, приглашаю всех посетить GitHub репозитории с множеством геологических моделей и их визуализацией в Blender и ParaView, а также примерами различного анализа. Также смотрите готовые визуализации на YouTube канале. Теги: pandas numpy scipy xarray dask distributed numba vtk PyVista matplotlib Добавить метки Хабы: Open source Программирование Геоинформационные сервисы Визуализация данных Научно-популярное Укажите причину минуса, чтобы автор поработал над ошибками Отправить анонимно Пометьте публикацию своими метками Метки лучше разделять запятой. Например: программирование, алгоритмы Сохранить Реклама Ой, у вас баннер убежал! Ну. И что? Читают сейчас Почему у авокадо большая косточка 29,6k 66 История одного собеседования 16,8k 27 Яндекс готовится купить банк 5,4k 28 История одной коробки передач 9,1k 43 Разработчик 7-Zip выпустил официальный билд для Linux спустя 22 года после выхода Windows-версии 16,5k 147 Судьба предателя, угнавшего новейший МиГ-25 в Японию 927k 2738 Экзамен на знание киберзлоумышленников Мегатест Редакторский дайджест Присылаем лучшие статьи раз в месяц Скоро на этот адрес придет письмо. Подтвердите подписку, если всё в силе. 0 4 435 Комментировать Поделиться Скопировать ссылку Facebook Twitter ВКонтакте Telegram Pocket Нарушение Опишите суть нарушения Отправить 4,0 Карма 13,5 Рейтинг Алексей Печников N-Cube Geoscience R&D and Geophysical Modeling Платежная система Сайт Github Похожие публикации 1 февраля 2021 в 17:29 Новый Numpy 1.20.0 — что туда завезли и стоит ли обновлять? 6 3k 1 0 26 декабря 2016 в 16:41 Быстрый Data Mining или сравнение производительности C# vs Python (pandas-numpy-skilearn) 3 11,3k 42 12 25 октября 2013 в 12:21 Пишем numpy-модуль для ускорения математических функций с помощью SIMD-инструкций 34 8,2k 61 4 Курсы SQL и получение данных 18 марта 2021 5 недель 17 900 Нетология Программирование на C# для тестировщиков 19 марта 2021 10 недель 15 500 Software-testing.ru Аналитик данных 25 марта 2021 6 месяцев 78 000 Яндекс.Практикум Программирование на Visual С++ 29 марта 2021 4 недели 24 990 Специалист.ру Java Advanced: функциональное, асинхронное и реактивное программирование 19 апреля 2021 45 000 Luxoft Training Больше курсов на Хабр Карьере Реклама AdBlock похитил этот баннер, но баннеры не зубы — отрастут Подробнее Минуточку внимания Комментарии 0 Только полноправные пользователи могут оставлять комментарии. Войдите, пожалуйста. Что обсуждают Сейчас Вчера Неделя Коронавирус нерукотворный: разбираем гипотезу о лабораторном происхождении SARS-CoV-2 19,1k 308 Яндекс готовится купить банк 5,4k 28 Биологически правдоподобное обучение ИИ. Краткий обзор достижений 1,4k 3 Как создавать спирографы в Excel 4,1k 15 Куда же плывут облака? Подбиваем итоги опроса и даём аналитику Мегапост Разработчик 7-Zip выпустил официальный билд для Linux спустя 22 года после выхода Windows-версии 16,5k 147 Почему возобновляемые источники энергии так быстро дешевеют и к чему это может привести? 10k 95 Как ощутить «интернет 2000 года» 10,1k 70 Почему у авокадо большая косточка 29,6k 66 Краткий курс хабраавторства, или Все шишки на одной ёлке Мегапост Что делать, если технический прогресс ухудшает жизнь людей? Перестаньте кормить зверя 30,3k 513 Коронавирус нерукотворный: разбираем гипотезу о лабораторном происхождении SARS-CoV-2 19,1k 308 «Группа смерти» изнутри: люди, которые играют в опасные игры 48,8k 295 Не блокировка, а замедление 60,5k 257 Куда же плывут облака? Подбиваем итоги опроса и даём аналитику Мегапост Самое читаемое Сутки Неделя Месяц Почему у авокадо большая косточка +118 29,6k 55 66 Заключённый использовал одиночную камеру для изучения математики. Сегодня он решает самые трудные уравнения в мире +96 43,7k 131 87 Судьба предателя, угнавшего новейший МиГ-25 в Японию +97 927k 132 2738 История одного собеседования +58 16,8k 40 27 Куда же плывут облака? Подбиваем итоги опроса и даём аналитику Мегапост Не блокировка, а замедление +111 60,5k 66 257 Смотрим любое кино мгновенно +65 49,4k 375 236 «Группа смерти» изнутри: люди, которые играют в опасные игры +258 48,8k 212 295 Заключённый использовал одиночную камеру для изучения математики. Сегодня он решает самые трудные уравнения в мире +96 43,7k 131 87 Экзамен на знание киберзлоумышленников Мегатест Судьба предателя, угнавшего новейший МиГ-25 в Японию +97 927k 132 2738 О фейковых криптовалютах (Ethereum, Tron, Ripple и пр) +230 183k 306 500 Как выжить, если вы падаете со скоростью 190 км/ч с высоты 10 000 метров, и у вас в запасе есть три минуты +155 144k 147 313 Почему Microsoft перестала бороться с пиратством своего ПО +81 117k 92 549 Экзамен на знание киберзлоумышленников Мегатест Ваш аккаунт Войти Регистрация Разделы Публикации Новости Хабы Компании Пользователи Песочница Информация Устройство сайта Для авторов Для компаний Документы Соглашение Конфиденциальность Услуги Реклама Тарифы Контент Семинары Мегапроекты Мерч © 2006 – 2021 «Habr» Настройка языка О сайте Служба поддержки Мобильная версия Настройка языка Интерфейс Русский English Язык публикаций Русский Английский Сохранить настройки