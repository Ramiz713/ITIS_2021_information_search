Все сервисы Хабра Сообщество IT-специалистов Ответы на любые вопросы об IT Профессиональное развитие в IT Удаленная работа для IT-специалистов Как стать автором Навигатор хабраавтора: от идеи до публикации Все потоки Разработка Администрирование Дизайн Менеджмент Маркетинг Научпоп Войти Регистрация 39,33 Рейтинг Совершенный код Как Макконнелл завещал Все подряд Лучшие Авторы Компании Без порога ≥10 ≥25 ≥50 ≥100 Doublesharp вчера в 19:54 Удвойте скорость написания кода на React с помощью этих простых трюков Блог компании SkillFactory, JavaScript, Программирование, Совершенный код, ReactJS Перевод Если вы работаете с React или React Native и чувствуете, что у вас медленная скорость написания кода, вы тратите много времени на поиск ошибок, а не на добавление нового функционала, работаете с большими исходными файлами и вам сложно находить нужные части кода, а также многократно реализуете одну и ту же логику, то эта статья для вас. Вы удвоите скорость написания кода, если отрефакторите код в повторно используемые строительные блоки. Мы рассмотрим React компонент, который можно хорошо разобрать. И мы будем шаг за шагом реорганизовывать его до хорошего уровня. Вы увидите большое количество идей, которые повысят вашу скорость написания кода. Читать далее +1 28 2,8k 8 Новости Обвиняемый в убийстве получил право проверить код полицейской программы сличения ДНК 5 февраля 2021 в 11:02 Комментарии: 59 В МТИ показали, как мозг читает компьютерный код 17 декабря 2020 в 11:22 Комментарии: 6 Разработчики ПО с открытым исходным кодом уделяют вопросам безопасности менее 3% времени 12 декабря 2020 в 12:36 Комментарии: 37 Кроа-Хартман из Linux: мы не боремся с новыми разработчиками, узким местом является проверка кода 27 октября 2020 в 11:42 Комментарии: 2 В Microsoft модель машинного обучения выявляет 99% ошибок безопасности 18 апреля 2020 в 12:43 Комментарии: 7 Из Windows 10 удалят Paint 3D и 3D Viewer 09:12 Комментарии: 0 NFT-токен художника Beeple поставил рекорд стоимости в 69$ млн вчера в 22:59 Комментарии: 6 Facebook перезапускает Instagram Lite для Android, чтобы занять развивающиеся рынки вчера в 16:55 Комментарии: 5 17 марта состоится ML meetup Online вчера в 12:57 Комментарии: 0 Исследование: восприятие скорости работы браузера зависит от публикаций в СМИ вчера в 11:05 Комментарии: 4 Показать ещё Все новости mobileSimbirSoft 11 марта 2021 в 12:27 Kotlin Best Practices Блог компании SimbirSoft, Совершенный код, Разработка мобильных приложений, Разработка под Android, Kotlin Kotlin, созданный всего 5 лет назад, с 2019 года считается приоритетным языком программирования под Android. И все же этот язык достаточно молод и продолжает развиваться, поэтому иногда бывает непонятно, каким образом лучше написать код. У нас в команде часто бывают обсуждения на тему чистого Kotlin-кода, и на их основе мы составили свои best practices. Хотим поделиться этими рекомендациями и ждем ваших вопросов. Ну что ж, приступим! В первую очередь, в Котлине много синтаксического сахара, и если им злоупотреблять, то читать такой код становится затруднительно. Следующие несколько пунктов можно отнести к борьбе между краткостью и читаемостью. Читать далее +3 27 3,6k 9 Itelma 10 марта 2021 в 17:21 Принципы для разработки: KISS, DRY, YAGNI, BDUF, SOLID, APO и бритва Оккама Блог компании НПП ИТЭЛМА, Программирование, Совершенный код, Проектирование и рефакторинг, Управление разработкой Перевод Хорошему программисту необходимо уметь совмещать свои навыки со здравым смыслом. Все дело в прагматизме и навыке выбора лучшего решения для вашей проблемы. Когда вы сталкиваетесь с проблемой при разработке ПО, вы можете воспользоваться базовыми принципами, которые помогут в выборе самого правильного подхода. В этом тексте приводится набор принципов, которые должен знать любой разработчик, и которые следует периодически освежать в памяти. Считайте их своим секретным оружием при программировании. Последовательное применение этих принципов упростит ваш переход от миддла к сеньору. Вы можете обнаружить, что некоторые (вероятно) вы применяете интуитивно. Принципов много. Мы остановимся на семи самых важных. Их использование поможет вам в развитии и позволит стать лучшим программистом. 1. YAGNI You Aren’t Gonna Need It / Вам это не понадобится Этот принцип прост и очевиден, но ему далеко не все следуют. Если пишете код, то будьте уверены, что он вам понадобится. Не пишите код, если думаете, что он пригодится позже. Этот принцип применим при рефакторинге. Если вы занимаетесь рефакторингом метода, класса или файла, не бойтесь удалять лишние методы. Даже если раньше они были полезны – теперь они не нужны. Может наступить день, когда они снова понадобятся – тогда вы сможете воспользоваться git-репозиторием, чтобы воскресить их из мертвых. Читать дальше → +12 147 5,8k 5 HiSER 8 марта 2021 в 01:29 Как подключить содержимое любых файлов для использования в коде C / C++ Программирование, Совершенный код, C++, Отладка, C Из песочницы Задача состояла в подключении файлов: HTML, JS, CSS; без специальной подготовки. Так же неудобно подключать бинарные файлы (например картинки) конвертируя их в HEX. Так как не хотелось конвертировать в HEX или разделять на строки, искал способ подключения файла в адресное пространство программы. Читать дальше → +78 146 12,5k 31 Минуточку внимания yadg 6 марта 2021 в 23:55 HowToCode — Адаптация системного подхода к разработке для React и TypeScript JavaScript, Программирование, Совершенный код, ReactJS, TypeScript Из песочницы Наверное, каждый программист рано или поздно начинает задумываться о качестве своего кода. И, скорее всего, я не ошибусь, если скажу, что добрая половина разработчиков им вечно недовольна. Мне мой код тоже нравился редко: функции, казалось, можно было бы делать и покороче, лишние вложенности было бы неплохо тоже убирать. Было бы здорово писать тесты и документацию, но на них времени не оставалось почти что никогда. Естественно, что я потратил кучу времени на чтение книг и всевозможных статей, пытаясь понять, как же сделать свой код лучше. Но картинка не складывалась. То ли рекомендации в книгах или статьях были через чур общими и местами противоречивыми, то ли дело было во мне, но, несмотря на усилия, результата было мало. Кардинальным образом ситуация изменилась после того, как я прошел курс HowToCode. В курсе описан системный и, как всё гениальное, простой и красивый подход к разработке, который сводит воедино анализ, проектирование, документацию, тестирование и разработку кода. Весь курс построен на использовании функциональной парадигмы и языка Scheme (диалекта Lisp), тем не менее, рекомендации вполне применимы и для других языков, а для JavaScript и TypeScript, к которым я постарался их адаптировать, так и вообще подходят отлично. Читать далее +15 75 4,3k 14 shortcircuit 2 марта 2021 в 15:46 Код ревью: как быть хорошим автором Блог компании Joom, Программирование, Совершенный код, Управление разработкой Tutorial Хочу рассказать, как автор кода может упростить работу ревьюеру и увеличить тем самым как качество ревью, так и производительность ревьюера. Эта статья вполне может использоваться в качестве в вашей внутрикорпоративной документации как руководство для подготовки изменений к ревью. Она, собственно, и была скомпилирована из такого руководства. Читать далее +35 92 8,3k 36 jackyodd 1 марта 2021 в 16:16 Trace, Info, Warning, Error, Fatal — кто все эти люди..? Программирование, Совершенный код Все знакомы с библиотеками логирования. Обычно они предлагают из коробки сразу много "уровней" важности, которым Вы можете записывать сообщения. Обычно в документации к ним можно найти рекомендации - как лучше этими уровнями - Info, Warning, Error, Fatal - пользоваться. Проблема в том, что это все не работает без некоторых дополнительных соглашений и уточнений - все равно возникает путаница и споры "какой уровень правильный". Именно об этих необходимых уточнениях я и хотел бы поговорить. Читать далее 0 23 2,7k 40 Реклама AdBlock похитил этот баннер, но баннеры не зубы — отрастут Подробнее chizh_andrey 1 марта 2021 в 12:00 Как построить четкие модели классов и получить реальные преимущества от UML. Часть 4 Блог компании Retail Rocket, Совершенный код, UML Design, ООП, Параллельное программирование Перевод Пришло время посмотреть на тип модели классов UML, который можно встретить во множестве проектов. А ещё, увы, который часто поощряется в книгах по UML. Читать далее +1 30 1,8k 4 onets 28 февраля 2021 в 23:52 CQS (CQRS) со своим блэкджеком Программирование, Совершенный код, .NET, C# Command-query separation (CQS) — это разделение методов на read и write. Command Query Responsibility Segregation (CQRS) — это разделение модели на read и write. Предполагается в одну пишем, с нескольких можем читать. М — масштабирование. Этот подход часто используют как способ организации кода, даже если хранилище одно. Но как всегда, в реальных более-менее сложных проектах эта штука дает сбой. Читать дальше → +4 47 3,6k 7 akaDuality 26 февраля 2021 в 12:14 Код без тестов — легаси Блог компании Dodo Engineering, Тестирование IT-систем, Совершенный код Перевод Если вы работаете в IT, то о легаси вы слышите часто — обычно с множеством негативных коннотаций. Понятно, что это не «хороший код», но какой? Может старый, может не поддерживаемый или не обновляемый, а может просто чужой? Есть ли «полноценное» определение «легаси», на которое можно ссылаться? А когда разберемся — что нам делать с легаси? Попробуем разобраться. Выводы неочевидны. +21 47 8k 23 Вакансии Android Developer от 200 000 Masters Можно удаленно Senior Backend developer от 150 000 Cove Можно удаленно Devops (Windows) от 150 000 deeplay Новосибирск Можно удаленно Backend Developer (Java + Spring Boot) от 2 000 до 2 900 Inperium Можно удаленно Database Engineer (DBA, PosgreSQL) от 3 000 Exness Можно удаленно Больше вакансий на Хабр Карьере Doublesharp 25 февраля 2021 в 16:00 Избегайте рекурсии в Python: вспомните о замыкании Блог компании SkillFactory, Python, Программирование, Совершенный код Перевод Вот что получается, когда кандидат наук заморачивается рекурсией… Раньше я был программистом, которому очень нравились рекурсивные функции, просто потому, что это очень круто, с их помощью можно продемонстрировать свои навыки программирования и интеллект. Однако в большинстве случаев рекурсивные функции имеют высокую сложность, поэтому нам следует избегать их использования. Одно из решений намного лучше – по возможности задействовать динамическое планирование: вероятно, оно – лучший способ решать задачи, которые можно разделить на подзадачи. Одна из моих предыдущих статей демонстрирует мощь динамического планирования. Приятного чтения! +2 54 5,6k 14 sla1k 23 февраля 2021 в 22:26 Паттерн CQRS: теория и практика в рамках ASP.Net Core 5 Совершенный код, .NET, API, C#, Микросервисы Из песочницы Скорость разработки и производительность программистов могут отличаться в зависимости от их уровня и используемых в проектах технологиях. Для проектирования ПО нет стандартов и ГОСТов, только вы выбираете, как будете разрабатывать свою программу. Один из лучших способов повысить эффективность работы — применить шаблон проектирования CQRS. Существует три вида паттерна CQRS: Regular, Progressive и Deluxe. В этой статье я расскажу о первом — классическом паттерне Regular CQRS, который мы используем в DD Planet в рамках разработки онлайн-сервиса «Выберу.ру». Progressive и Deluxe — более сложные архитектуры и влекут за собой использование обширного набора абстракций. Я поделюсь опытом своей команды: как мы применили паттерн CQRS в наших бизнес-приложениях и беспроблемно внедрили его в существующие проекты, не переписывая тысячи строк кода. Читать дальше +3 43 4,4k 19 StjarnornasFred 22 февраля 2021 в 20:04 Что такое хороший код? Считаем звёзды Программирование, Совершенный код Recovery Mode Никогда такого не было, и вот опять! Опять на прошлой неделе на Хабре появился (и был очень активно комментирован) пост, ныне удалённый, о том, что такое хороший код и чем он отличается от плохого. Яндекс подсказывает, что публикаций о хорошем (вариант: отличном, идеальном, правильном, чистом, грязном, плохом и т.д.) коде здесь уже десятки и сотни, появляются они стабильно на протяжении многих лет, всегда активно обсуждаются, но к единому мнению на этот счёт так и не пришли. Моё мнение - нет никакого "хорошего кода", потому что само понятие "хороший" крайне субъективно и неизмеримо. Так, может, нужна линейка для измерения хорошести качества кода? В общем, предлагаю вашему вниманию шкалу, которая самонадеянно претендует на исчерпывающий ответ. В шкале ровно 5 значений (ну или 6, начиная с нулевого - мыжпрограммисты), а для наглядности они обозначены звёздами. Впрочем, вы можете заменить звёзды на даны, школьные баллы, попугаи или любые другие единицы измерения - суть не изменится. Погнали! Так как же оценить хороший код? –9 10 2,9k 13 Курсы Веб-дизайнер 16 марта 2021 8 месяцев 83 000 GeekBrains Python QA Engineer 16 марта 2021 4 месяца 60 000 OTUS Java QA Engineer 16 марта 2021 4 месяца 60 000 OTUS Project Manager 16 марта 2021 6 месяцев 24 000 GeekBrains Профессия Android-разработчик 16 марта 2021 18 месяцев 85 200 SkillFactory Больше курсов на Хабр Карьере Kolomatskiy 12 февраля 2021 в 13:34 Код-ревью в Практикуме: как мы делаем его быстрее и эффективнее Блог компании Яндекс.Практикум, Python, Программирование, Совершенный код, Управление разработкой Код-ревью — полезный инструмент для командной разработки и для прокачки собственных навыков. Код-ревью помогает обнаружить недочёты в коде: как синтаксические или стилистические ошибки, так и неоптимальные или неэффективные подходы. В командной разработке, когда команда делает большой проект, код-ревью также помогает оставаться в курсе изменений в разных частях кода. Когда программист-новичок впервые сталкивается с код-ревью, он часто расстраивается. В его коде по неопытности часто оказывается довольно много проблем, которые видит более опытный разработчик. Однако очень важно уметь правильно принимать обратную связь, ведь задача ревьюера такая же, как и задача разработчика — сделать код проекта наиболее качественным и эффективным. Меня зовут Артём Коломацкий, я старший ревьюер бэкенд-факультета в Яндекс.Практикуме. Я расскажу про практики, которые мы используем в код-ревью наших студентов. Часть из них — наши внутренние правила, а часть — универсальные советы, которые вы легко сможете применить у себя в команде. Код-ревью в Практикуме В Практикуме мы проводим ревью кода на собственной онлайн-платформе, которая называется «Ревизор». Туда попадают все сданные студентами работы. Платформа работает по аналогии с интерфейсами в Gitlab/Github/Bitbucket: можно просмотреть список файлов, изменения между версиями, а также оставить комментарии к определённым строкам. Читать дальше → +22 51 6,1k 5 nin-jin 10 февраля 2021 в 17:11 Инверсия контроля на голом TypeScript без боли Программирование, Совершенный код, Проектирование и рефакторинг, Тестирование веб-сервисов, TypeScript Tutorial Здравствуйте, меня зовут Дмитрий Карловский и (сколько себя помню) я борюсь со своим окружением. Ведь оно такое костное, дубовое, и никогда не понимает, что я от него хочу. Но в какой-то момент я понял, что хватит это терпеть и надо что-то менять. Поэтому теперь не окружение диктует мне, что я могу и не могу делать, а я диктую окружению каким ему быть. Как вы уже поняли, далее речь пойдёт про инверсию контроля через "контекст окружения". Многим этот подход уже знаком по "переменным окружения" - они задаются при запуске программы и обычно наследуются для всех программ, которые та запускает. Мы же применим эту концепцию для организации нашего кода на TypeScript. Итак, что мы хотим получить: Что-что? +9 32 3,2k 9 AloneCoder 10 февраля 2021 в 16:44 Культ лучших практик Блог компании Mail.ru Group, Программирование, Совершенный код, Терминология IT, Управление разработкой Перевод Лучшие практики, несмотря на термин, не всегда хороши. В программировании многие из них не оправдывают своего названия. Они распространяются не благодаря своим заслугам или доказательствам эффективности, а из-за эффекта авторитета и использования обществом. По мере их распространения теряются нюансы. А с потерей нюансов становится легче заниматься их евангелизмом. В сочетании с нехваткой опыта это может привести к возникновению культа лучших практик. Представьте команду, которая одержима их использованием — скажем, разработкой через тестирование (test-driven development) или написанием пользовательских сценариев, — до такой степени, что это уже вредит. В эту ловушку попадали многие, в том числе и я. Почему лучшие практики могут быть вредны? Почему мы любим им следовать? Когда и как они мешают? Чтобы ответить на эти вопросы, нужно понять, откуда берутся эти практики и как они распространяются в программировании. Читать дальше → +52 69 11,9k 29 Заказы Project manager - сделать бизнес постановку и декомпозицию задач 3 000 за проект 0 откликов 4 просмотра Произвести несколько сцен для научно-образовательного фильма 3 000 за проект 0 откликов 8 просмотров Разместить сайт на amazon web hosting 1 500 за проект 3 отклика 11 просмотров Laravel - проект 90 000 за проект 0 откликов 14 просмотров Доработать сложную python библиотеку по анализу музыки на базе librosa 15 000 за проект 3 отклика 19 просмотров Больше заказов на Хабр Фрилансе dmdev 8 февраля 2021 в 12:14 Свойства против методов Программирование, Java, Совершенный код, Проектирование и рефакторинг, Kotlin На первый взгляд, такой вопрос как выбор свойства или метода кажется простым. Но это до тех пор, пока вы не столкнётесь с непониманием в своей команде. Хотя есть устоявшиеся практики, их формулировки достаточно расплывчаты. В такого рода вопросах есть некоторая степень свободы, которая затрудняет наш выбор, а кажущаяся простота даёт плодородную почву для споров. Читать дальше → +8 42 4,5k 4 Andrey2008 5 февраля 2021 в 12:49 Исследование COVID-19 и неинициализированная переменная Блог компании PVS-Studio, Open source, Программирование, Совершенный код, C++ Существует открытый проект COVID-19 CovidSim Model, написанный на языке C++. Существует статический анализатор кода PVS-Studio, который умеет хорошо находить ошибки. Однажды они встретились. Познайте хрупкость алгоритмов математического моделирования и почему нужно прикладывать максимум усилий к качеству программного кода. Читать дальше → +15 6 3,2k 24 Dukarav 4 февраля 2021 в 04:35 Чего не хватает для идеального профилирования кода Программирование, Совершенный код, Отладка, Процессоры Знаете ли вы, как работает такая серьезная программа оценки производительности, как Intel VTune Amplifier? Не в смысле интерфейса с пользователем и разных возможностей, а на какой аппаратной поддержке она основана? Я попытался найти об этом информацию, но как-то разработчики этой программы не делятся с пользователями объяснениями, как именно они получают данные о пользовательской программе. Вероятно, никаких секретных команд и способов там нет. Все основано на сигналах прерываний и установке аппаратных и программных контрольных точек (которые тоже вызывают прерывания). Ну и, конечно, на чтении «телеметрии» самого процессора. Я не рассматриваю здесь интерпретируемые языки типа Питона. Ясно, что интерпретатор и безо всяких сигналов прерываний легко может собирать статистику при выполнении программы. А вот все остальное, кроме случаев вставки в код специальных вызовов, так или иначе, требует прерываний. Ну, или, например, виртуальной машины, которая тоже требует прерываний. При этом близкое к идеальному с точки зрения накладных расходов профилирование кода получается, когда используют метод Монте-Карло, который позволяет оценить распределение нагрузки с точностью до периода таймерного прерывания. Т.е. достаточно поставить обработчик на системный таймер и извлекать из автоматически запоминаемого контекста указатель текущей команды RIP (EIP). Затем, имея адреса подпрограмм, легко определить, какая именно подпрограмма работала в момент прерывания, и статистически учитывать это в профиле выполняемого кода. Поиск подпрограммы по адресу RIP процесс, конечно, тоже не мгновенный и не бесплатный, но его можно отложить, а в реальном времени лишь запоминать в памяти очередное значение RIP. Никакой специальной аппаратной поддержки в данном случае не требуется и для типового кода метод дает хорошие результаты даже для периодичности таймера порядка мс. Но программисты все равно недовольны; «для программ, обрабатывающих тысячи событий в секунду, требуется сильное уменьшение периода, а это и дает большие накладные расходы, и портит результат. Кроме этого, такой метод часто неприменим для профилирования низкоуровневого кода — тех же обработчиков прерываний, процедур планировщика ОС и т.п.» Читать далее +2 12 1,4k 6 flancer 28 января 2021 в 09:53 А такой ли уж анти-паттерн этот Service Locator? PHP, Программирование, Совершенный код, IT-стандарты В индустрии сложилось устойчивое мнение, что Service Locator является анти-паттерном. Из wiki: "Стоит заметить, что в некотором случае локатор служб фактически является анти-шаблоном." В этой публикации я рассматриваю тот случай, когда, на мой взгляд, Service Locator анти-шаблоном не является. Читать далее +4 25 4k 26 ← сюда туда → 1 2 3 4 5 6 7 8 Реклама Ой, у вас баннер убежал! Ну. И что? Спонсоры сообщества ВТБ Развивает и делает финансовые услуги доступными онлайн. Huawei ИКТ-эксперт. Поставляет умные устройства и строит интеллектуальную инфраструктуру Авито Главные по объявлениям в России. Укрощают высокие нагрузки. Как стать спонсором? Вклад авторов AloneCoder 1 134,4 fillpackart 979,2 Andrey2008 618,2 PsyHaSTe 548,8 valemak 486,0 alizar 419,6 spiff 370,0 Tomcat 356,0 tangro 328,0 Delka 301,0 100 лучших авторов Читают сейчас Почему у авокадо большая косточка 29,6k 66 История одного собеседования 16,8k 27 Яндекс готовится купить банк 5,4k 28 История одной коробки передач 9,1k 43 Разработчик 7-Zip выпустил официальный билд для Linux спустя 22 года после выхода Windows-версии 16,5k 147 Судьба предателя, угнавшего новейший МиГ-25 в Японию 927k 2738 Куда же плывут облака? Подбиваем итоги опроса и даём аналитику Мегапост Пока никто не указал причину минусов Причины минусов Самое читаемое Сутки Неделя Месяц Почему у авокадо большая косточка +118 29,6k 55 66 Заключённый использовал одиночную камеру для изучения математики. Сегодня он решает самые трудные уравнения в мире +96 43,7k 131 87 Судьба предателя, угнавшего новейший МиГ-25 в Японию +97 927k 132 2738 История одного собеседования +58 16,8k 40 27 Экзамен на знание киберзлоумышленников Мегатест Не блокировка, а замедление +111 60,5k 66 257 Смотрим любое кино мгновенно +65 49,4k 375 236 «Группа смерти» изнутри: люди, которые играют в опасные игры +258 48,8k 212 295 Заключённый использовал одиночную камеру для изучения математики. Сегодня он решает самые трудные уравнения в мире +96 43,7k 131 87 Краткий курс хабраавторства, или Все шишки на одной ёлке Мегапост Судьба предателя, угнавшего новейший МиГ-25 в Японию +97 927k 132 2738 О фейковых криптовалютах (Ethereum, Tron, Ripple и пр) +230 183k 306 500 Как выжить, если вы падаете со скоростью 190 км/ч с высоты 10 000 метров, и у вас в запасе есть три минуты +155 144k 147 313 Почему Microsoft перестала бороться с пиратством своего ПО +81 117k 92 549 Куда же плывут облака? Подбиваем итоги опроса и даём аналитику Мегапост Минуточку внимания Ваш аккаунт Войти Регистрация Разделы Публикации Новости Хабы Компании Пользователи Песочница Информация Устройство сайта Для авторов Для компаний Документы Соглашение Конфиденциальность Услуги Реклама Тарифы Контент Семинары Мегапроекты Мерч © 2006 – 2021 «Habr» Настройка языка О сайте Служба поддержки Мобильная версия Настройка языка Интерфейс Русский English Язык публикаций Русский Английский Сохранить настройки